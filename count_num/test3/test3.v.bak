module test3(clk,rst,rst_num,seg,seg_on);
	input clk;
	input rst;
	input rst_num;
	output reg[7:0] seg;
	output reg[1:0] seg_on;
	reg mode;
	reg[7:0] seg_num[15:0];
	reg onMSChange;
	reg[7:0] sum;
	reg[7:0] sum2;
	reg moreThanNine;
	reg[4:0] shake_cnt;
	reg[16:0] clk_count;
	reg[4:0] carry;
	
	initial
		begin
		seg_num[0] <= 8'b11111100;
		seg_num[1] <= 8'b01100000;
		seg_num[2] <= 8'b11011010;
		seg_num[3] <= 8'b11110010;
		seg_num[4] <= 8'b01100110;
		seg_num[5] <= 8'b10110110;
		seg_num[6] <= 8'b10111110;
		seg_num[7] <= 8'b11100000;
		seg_num[8] <= 8'b11111110;
		seg_num[9] <= 8'b11110110;
		seg_num[10] <= 8'b11101110;
		seg_num[11] <= 8'b00111110;
		seg_num[12] <= 8'b10011100;
		seg_num[13] <= 8'b01111010;
		seg_num[14] <= 8'b10011110;
		seg_num[15] <= 8'b10001110;
		seg <= 8'b0;
		seg_on <= 2'b10;
		clk_count <= 0;
		onMSChange <= 0;
		mode <= 1;
		shake_cnt <= 0;
		//moreThanNine <= 0;
		sum2 <= 0;
		sum <= 0;
		end
	always@(posedge clk)
		
			begin
			if(clk_count >= 44800)
				begin
				clk_count <= 0;
				onMSChange <= 1;
				end
			else
				begin
				clk_count <= clk_count + 1;
				onMSChange <= 0;
				end
			end
		
	
	
	
	always@(posedge onMSChange or negedge rst)
		begin
		if(rst)
			begin
			mode <= 0;
			end
		else
			begin		
			//seg
			if(seg_on == 2'b01)
				begin
				seg_on <= 2'b10;
				end
			else
				begin
				seg_on <= seg_on << 1 | 1;
				end
			
			//button
			if(rst_num)
				begin
				if(shake_cnt <= 20)
					begin
					shake_cnt <= shake_cnt + 1;
					end
				if(shake_cnt == 20)
					begin
					sum <= sum + 1;
					end
				end
			else
				begin
				shake_cnt <= 0;
				end
			
			//show
			if(mode == 1)
				begin
				if(sum == 8'd30)
					begin
					sum2[7:4] <= 3;
					sum2[3:0] <= 0;
					end
				else if(sum >= 8'd20)
					begin
					sum2[7:4] <= 2;
					sum2[3:0] <= sum[3:0]-4;
					end
				else if(sum >= 8'd16)
					begin
					sum2[7:4] <= 1;
					sum2[3:0] <= sum[3:0]+6;
					end
				else if(sum >= 8'd10)
					begin
					sum2[7:4] <= 1;
					sum2[3:0] <= sum[3:0]-10;
					end
				else 
					begin
					sum2[7:4] <= 0;
					sum2[3:0] <= sum[3:0];
					end
				if(seg_on == 2'b10)
					begin
					seg <= seg_num[sum2[3:0]];
					end
				else if(seg_on == 2'b01)
					begin
					seg <= seg_num[sum2[7:4]];
					end
				end
			else if(mode == 0)
				begin
				if(seg_on == 2'b10)
					begin
					seg <= seg_num[0];
					end
				else if(seg_on == 2'b01)
					begin
					seg <= seg_num[0];
					end
				mode <= 1;
				end
			end
		end
endmodule
