module count_num_4(clk,key,res,digit_seg);
	input clk;
	input key;
	input res;
	output reg[7:0] digit_seg;
	
	wire key_pulse;
	wire res_pulse;
	reg[7:0] count_num=8'b0000000;
	
	reg[31:0] div_count;
	reg digit;
	wire[1:0] digit_con;
	wire[3:0] digit_sig;
	assign digit_sig=digit?count_num[7:4]:count_num[3:0];
	always @(posedge clk)
		div_count=div_count+1;
	
	always @(posedge div_count[10])
		digit<=~digit;
		
	assign digit_con={digit,~digit};
	
	always @(posedge clk)
		begin
		if(key_pulse==1)
		count_num=count_num+1;
		if(res_pulse==1)
		count_num=0;
		end
	debounce u1(.clk(clk),.key_in(key),.key_out(key_pulse));
	debounce u2(.clk(clk),.key_in(res),.key_out(res_pulse));
	
	always @(posedge div_count[10])
		begin
		  case (digit_sig)
        4'h0:  digit_seg <= 8'b11111100; //显示0~F
        4'h1:  digit_seg <= 8'b01100000;  
        4'h2:  digit_seg <= 8'b11011010;
        4'h3:  digit_seg <= 8'b11110010;
        4'h4:  digit_seg <= 8'b01100110;
        4'h5:  digit_seg <= 8'b10110110;
        4'h6:  digit_seg <= 8'b10111110;
        4'h7:  digit_seg <= 8'b11100000;
        4'h8:  digit_seg <= 8'b11111110;
        4'h9:  digit_seg <= 8'b11110110;
        4'hA:  digit_seg <= 8'b11101110;
        4'hB:  digit_seg <= 8'b00111110;
        4'hC:  digit_seg <= 8'b10011100;
        4'hD:  digit_seg <= 8'b01111010;
        4'hE:  digit_seg <= 8'b10011110;
        4'hF:  digit_seg <= 8'b10001110;
    endcase
		
		end
	endmodule

module debounce(clk,key_in,key_out);
	parameter SAMPLE_TIME = 4;
	input clk;
	input key_in;
	output key_out;

	reg [21:0] count_low;
	reg [21:0] count_high;

	reg key_out_reg;

	always @(posedge clk)
	if(key_in ==1'b0)
	count_low <= count_low + 1;
	else
	count_low <= 0;

	always @(posedge clk)
	if(key_in ==1'b1)
	count_high <= count_high + 1;
	else
	count_high <= 0;

	always @(posedge clk)
	if(count_high == SAMPLE_TIME)
	key_out_reg <= 1;
	else if(count_low == SAMPLE_TIME)
	key_out_reg <= 0;

	assign key_out = key_out_reg;
endmodule 

	