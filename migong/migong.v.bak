module migong(clk,start,res,change_map,direction,digit_seg0,digit_seg1,digit_con,r_col,g_col,row);
	input clk;
	input [3:0]direction;
	input start;
	input res;
	input change_map;
	output [7:0]digit_seg0;
	output [7:0]digit_seg1;
	output [1:0]digit_con;
	output [7:0]r_col;
	output [7:0]g_col;
	output [7:0]row;
	
	reg clk_10kHz;
	reg [19:0] count1=20'd0;
	
	always @(posedge clk)  //10kHz分频器
	begin
	if(count1==2499)
	begin
		clk_10kHz=~clk_10kHz;
		count1=20'd0;
	end
	else
		count1=count1+1;
	end
	
	reg [3:0] row_num=4'b0000; //点阵行数控制器
	reg [7:0] row_temp;
	
	always @(posedge clk_10kHz)  //动态扫描点阵行
	begin
		if(row_num==4'0100)
			row_num=4'0000;
		row_num=row_num+1;
		row_temp=1<<row_num;
		row=~row_temp;
	end
	
	always @(posedge row_num)
	begin
		case(row_num-1)
			4'd0:r_col<=00011111;
			4'd1:r_rol<=11000001;
			4'd2:r_rol<=11111101;
			4'd3:r_rol<=10000101;
			4'd4:r_rol<=10110001;
			4'd5:r_rol<=10111111;
			4'd6:r_rol<=10000000;
			4'd7:r_rol<=11111111;
		endcase
	end
		

endmodule

/*module frequency_divider(start,res,change_map,clk,ten,one);		//倒计时装置
		input start;
		input res;
		input change_map;
		input clk;
		output reg[3:0]ten
		output reg[3:0]one;
		reg[31:0] time_count=32'd0;
		reg[4:0] time1;
		wire start_lock;
		wire res_lock;
		wire change_map_lock;
		if(start_lock or res_lock or change_map_lock)
			time1=5'd30;
		always @(posedge clk)
			begin
			if(time1!=5'd00)
			begin
			for
			begin
			if(time_count==50000000)
			begin
				time_count=32'd0;
				time1=time1-1;
			end
			time_count=time_count+1;
			end
			end
			debounce u1(clk,start,start_lock);
			debounce u2(clk,res,res_lock);
			debounce u3(clk,change_map,change_map_lock);
		
			integer i;//计时器二进制转BCD码
	
			always @(count_num)
			begin
			ten=4'd0;
			one=4'd0;
		
			for(i=4;i>=0;i=i-1)
			begin
			if(ten>4)
			ten=ten+4'd3;
			if(one>4)
			one=one+4'd3;
		
			ten=ten<<1;
			ten[0]=one[3];
			one=one<<1;
			one[0]=count_num[i];
			end
			end
			end
					
			
module debounce(clk,key_in,key_out);
	reg [19:0]tcnt1;
	
	always @(posedge clk or negedge key_in)
	begin
	if(!key_in)tcnt1<=20'd0;
	else tcnt1<=tcnt1+1;
	end
	always @(posedge clk or negedge key_in)
	begin
	if(!key_in)key_out<=0;
		else if(tcnt1==20'hfffff)key_out<=key_in;
	end
endmodule*/
