// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/26/2018 08:59:53"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          analog
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module analog_vlg_vec_tst();
// constants                                           
// general purpose registers
reg change_map;
reg clk;
reg start;
reg [6:0] step_cnt;
reg [4:0] time_sign;
// wires                                               
wire [7:0] digit_con;
wire [7:0] digit_seg0;

// assign statements (if any)                          
analog i1 (
// port map - connection between master ports and signals/registers   
	.change_map(change_map),
	.clk(clk),
	.digit_con(digit_con),
	.digit_seg0(digit_seg0),
	.start(start),
	.step_cnt(step_cnt),
	.time_sign(time_sign)
);
initial 
begin 
#1000000 $finish;
end 

// change_map
initial
begin
	change_map = 1'b0;
	change_map = #120000 1'b1;
	change_map = #90000 1'b0;
	change_map = #240000 1'b1;
	change_map = #80000 1'b0;
	change_map = #200000 1'b1;
	change_map = #80000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// start
initial
begin
	start = 1'b0;
	start = #10000 1'b1;
	start = #10000 1'b0;
	start = #350000 1'b1;
	start = #40000 1'b0;
end 
// step_cnt[ 6 ]
initial
begin
	step_cnt[6] = 1'b0;
end 
// step_cnt[ 5 ]
initial
begin
	step_cnt[5] = 1'b0;
	step_cnt[5] = #20000 1'b1;
	step_cnt[5] = #720000 1'b0;
end 
// step_cnt[ 4 ]
initial
begin
	step_cnt[4] = 1'b0;
end 
// step_cnt[ 3 ]
initial
begin
	step_cnt[3] = 1'b0;
	step_cnt[3] = #20000 1'b1;
	step_cnt[3] = #840000 1'b0;
end 
// step_cnt[ 2 ]
initial
begin
	step_cnt[2] = 1'b0;
end 
// step_cnt[ 1 ]
initial
begin
	step_cnt[1] = 1'b0;
	step_cnt[1] = #740000 1'b1;
	step_cnt[1] = #120000 1'b0;
end 
// step_cnt[ 0 ]
initial
begin
	step_cnt[0] = 1'b0;
	step_cnt[0] = #20000 1'b1;
	step_cnt[0] = #840000 1'b0;
end 
// time_sign[ 4 ]
initial
begin
	time_sign[4] = 1'b0;
end 
// time_sign[ 3 ]
initial
begin
	time_sign[3] = 1'b0;
	time_sign[3] = #20000 1'b1;
	time_sign[3] = #530000 1'b0;
	time_sign[3] = #70000 1'b1;
	time_sign[3] = #290000 1'b0;
end 
// time_sign[ 2 ]
initial
begin
	time_sign[2] = 1'b0;
	time_sign[2] = #20000 1'b1;
	time_sign[2] = #530000 1'b0;
end 
// time_sign[ 1 ]
initial
begin
	time_sign[1] = 1'b0;
end 
// time_sign[ 0 ]
initial
begin
	time_sign[0] = 1'b0;
	time_sign[0] = #620000 1'b1;
	time_sign[0] = #290000 1'b0;
end 
endmodule

