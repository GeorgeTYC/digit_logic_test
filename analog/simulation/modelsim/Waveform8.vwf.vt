// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/26/2018 09:25:00"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          analog
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module analog_vlg_vec_tst();
// constants                                           
// general purpose registers
reg change_map;
reg clk;
reg direction1;
reg direction2;
reg direction3;
reg direction4;
reg start;
// wires                                               
wire [7:0] digit_con;
wire [7:0] digit_seg0;
wire [7:0] g_col;
wire [7:0] r_col;
wire [7:0] row;

// assign statements (if any)                          
analog i1 (
// port map - connection between master ports and signals/registers   
	.change_map(change_map),
	.clk(clk),
	.digit_con(digit_con),
	.digit_seg0(digit_seg0),
	.direction1(direction1),
	.direction2(direction2),
	.direction3(direction3),
	.direction4(direction4),
	.g_col(g_col),
	.r_col(r_col),
	.row(row),
	.start(start)
);
initial 
begin 
#1000000 $stop;
end 

// change_map
initial
begin
	change_map = 1'b0;
	change_map = #480000 1'b1;
	change_map = #490000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// direction1
initial
begin
	direction1 = 1'b0;
	direction1 = #90000 1'b1;
	direction1 = #30000 1'b0;
	direction1 = #440000 1'b1;
	direction1 = #30000 1'b0;
end 

// direction2
initial
begin
	direction2 = 1'b0;
	direction2 = #160000 1'b1;
	direction2 = #30000 1'b0;
	direction2 = #440000 1'b1;
	direction2 = #30000 1'b0;
end 

// direction3
initial
begin
	direction3 = 1'b0;
	direction3 = #230000 1'b1;
	direction3 = #30000 1'b0;
	direction3 = #440000 1'b1;
	direction3 = #30000 1'b0;
end 

// direction4
initial
begin
	direction4 = 1'b0;
	direction4 = #300000 1'b1;
	direction4 = #30000 1'b0;
	direction4 = #440000 1'b1;
	direction4 = #30000 1'b0;
end 

// start
initial
begin
	start = 1'b0;
	start = #10000 1'b1;
	start = #50000 1'b0;
	start = #420000 1'b1;
	start = #60000 1'b0;
end 
endmodule

